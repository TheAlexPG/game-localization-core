import os
import re
import time
import json
import requests
from pathlib import Path
from typing import List, Dict, Tuple

# ===== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø =====
# <<< –ó–ú–Ü–ù–ï–ù–û: –í–∫–∞–∑–∞–Ω–æ RU —è–∫ –≤–∏—Ö—ñ–¥–Ω—É –º–æ–≤—É
SOURCE_DIR = "./SILKSONG_RU/._Decrypted"  # –ü–∞–ø–∫–∞ –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ (—Ä–æ—Å—ñ–π—Å—å–∫–∏–º–∏)
OUTPUT_DIR = "./SILKSONG_UA"  # –ü–∞–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
API_URL = "http://localhost:1234/v1/chat/completions"
MODEL_NAME = "openai-gpt-oss-20b-temp"
TEMPERATURE = 0.3  # –ù–∏–∑—å–∫–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ –ø–µ—Ä–µ–∫–ª–∞–¥—É
MAX_RETRIES = 3
RETRY_DELAY = 2

# –ì–ª–æ—Å–∞—Ä—ñ–π —Ç–µ—Ä–º—ñ–Ω—ñ–≤ —â–æ –Ω–µ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ
PRESERVE_TERMS = [
    "Hornet", "Pharloom", "Silksong", "Citadel",
    "Garmond", "Lace", "Shakra", "Coral", "–Ø—Ä–Ω–∞–±–∏"  # –î–æ–¥–∞–≤ —ñ–º'—è –∑ –ø—Ä–∏–∫–ª–∞–¥—É
]

# –ì–ª–æ—Å–∞—Ä—ñ–π –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É
GLOSSARY = {
    "Weaver": "–¢–∫–∞—á",
    "Needle": "–ì–æ–ª–∫–∞",
    "Thread": "–ù–∏—Ç–∫–∞",
    "Silk": "–®–æ–≤–∫",
    "Hunter": "–ú–∏—Å–ª–∏–≤–µ—Ü—å",
    "Knight": "–õ–∏—Ü–∞—Ä",
    "Crest": "–ì–µ—Ä–±",
    "Wilds": "–ü—É—Å—Ç–∫–∞",
    "Forge": "–ö—É–∑–Ω—è",
    "Peak": "–ü—ñ–∫",
    "Void": "–ü–æ—Ä–æ–∂–Ω–µ—á–∞",
    "Soul": "–î—É—à–∞",
    "Mask": "–ú–∞—Å–∫–∞",
    "Charm": "–û–±–µ—Ä—ñ–≥",
    "Spool": "–ö–æ—Ç—É—à–∫–∞",
    "Fragment": "–§—Ä–∞–≥–º–µ–Ω—Ç",
    "Up": "–í–≥–æ—Ä—É",
    "No": "–ù—ñ",
    "Yes": "–¢–∞–∫",
    "Down": "–í–Ω–∏–∑"
}


class SilksongLMStudioTranslator:
    def __init__(self):
        self.translation_cache = {}
        self.stats = {"translated": 0, "cached": 0, "errors": 0, "retried": 0}
        self.load_cache()

    def create_prompt(self, text: str) -> str:
        """ <<< –ó–ú–Ü–ù–ï–ù–û: –ü—Ä–æ–º–ø—Ç –∑–Ω–∞—á–Ω–æ –ø–æ—Å–∏–ª–µ–Ω–æ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–µ–≥—ñ–≤ """
        glossary_str = "\n".join([f"- {en}: {ua}" for en, ua in GLOSSARY.items()])
        preserve_str = ", ".join(PRESERVE_TERMS)

        prompt = f"""You are a meticulous game localizer translating "Hollow Knight: Silksong" from Russian to Ukrainian. Your primary goal is to preserve the original game's technical tags and formatting exactly.

### CRITICAL RULES ###
1.  **Strict Tag Preservation**: The text contains special tags like `<page>`, `<hpage>`, `&lt;page&gt;`, `&#8220;`, etc. You MUST copy these tags to the output **EXACTLY** as they appear in the original text, without any changes, translations, or reformatting.
2.  **Translate ONLY the Text**: Translate only the human-readable text between the tags.
3.  **Atmospheric Style**: Maintain the poetic and dark fantasy style.
4.  **Glossary & Names**: Strictly use this glossary:
{glossary_str}
    And do not translate these names: {preserve_str}.

### EXAMPLE ###
- **Original Text**:
–¢–∞–∫-—Ç–∞–∫! –ß—Ç–æ —ç—Ç–æ —É –Ω–∞—Å —Ç—É—Ç? –ó–∞—Ä–∞–∂–µ–Ω–∏–µ, –±–∑-–∑-–∑?&lt;page&gt;–¢—ã —Ö–æ—Ç—è –±—ã –∑–Ω–∞–µ—à—å, –∫—Ç–æ —è?
- **Correct Ukrainian Translation**:
–¢–∞–∫-—Ç–∞–∫! –©–æ —Ü–µ –≤ –Ω–∞—Å —Ç—É—Ç? –ó–∞—Ä–∞–∂–µ–Ω–Ω—è, –±–∑-–∑-–∑?&lt;page&gt;–¢–∏ —Ö–æ—á–∞ –± –∑–Ω–∞—î—à, —Ö—Ç–æ —è?

### RUSSIAN TEXT TO TRANSLATE ###
{text}

### UKRAINIAN TRANSLATION ###
"""
        return prompt

    def call_lm_studio(self, text: str) -> str:
        """–í–∏–∫–ª–∏–∫–∞—î LM Studio API –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É"""
        for attempt in range(MAX_RETRIES):
            try:
                response = requests.post(
                    API_URL,
                    json={
                        "model": MODEL_NAME,
                        "messages": [
                            {
                                "role": "system",
                                "content": "You are a professional Ukrainian game translator. Follow the user's instructions for tag preservation precisely."
                            },
                            {
                                "role": "user",
                                "content": self.create_prompt(text)
                            }
                        ],
                        "temperature": TEMPERATURE,
                        "max_tokens": 1024,  # –ó–±—ñ–ª—å—à–µ–Ω–æ, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –æ–±—Ä—ñ–∑–∫–∏ –¥–æ–≤–≥–∏—Ö —Ä—è–¥–∫—ñ–≤
                        "stream": False
                    },
                    timeout=45  # –ó–±—ñ–ª—å—à–µ–Ω–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
                )

                if response.status_code == 200:
                    result = response.json()
                    translation = result['choices'][0]['message']['content'].strip()

                    # <<< –ó–ú–Ü–ù–ï–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ—Ä–æ–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                    if not translation:
                        print(
                            f"  ‚ö†Ô∏è Warning: Received empty response. Retrying... (Attempt {attempt + 1}/{MAX_RETRIES})")
                        self.stats["retried"] += 1
                        time.sleep(RETRY_DELAY)
                        continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Å–ø—Ä–æ–±–∏

                    # –û—á–∏—â–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –º–æ–∂–ª–∏–≤–∏—Ö –ø–æ—è—Å–Ω–µ–Ω—å
                    if "### UKRAINIAN TRANSLATION ###" in translation:
                        translation = translation.split("### UKRAINIAN TRANSLATION ###")[-1].strip()

                    return translation
                else:
                    print(f"  ‚ùå Error {response.status_code}: {response.text}")

            except requests.exceptions.RequestException as e:
                print(f"  üîó Connection error (attempt {attempt + 1}/{MAX_RETRIES}): {e}")
            except Exception as e:
                print(f"  üí• Unexpected error: {e}")

            if attempt < MAX_RETRIES - 1:
                time.sleep(RETRY_DELAY)

        self.stats["errors"] += 1
        return f"[TRANSLATION ERROR] {text}"

    def translate_text(self, text: str) -> str:
        """–ü–µ—Ä–µ–∫–ª–∞–¥–∞—î —Ç–µ–∫—Å—Ç –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º"""
        # <<< –ó–ú–Ü–ù–ï–ù–û: –û–±—Ä–æ–±–∫–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ä—è–¥–∫—ñ–≤, —è–∫—ñ –Ω–µ —î —Ç–µ—Ö–Ω—ñ—á–Ω–∏–º–∏
        if not text or text.startswith('$'):
            return text

        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ä—è–¥–∫–∏, —â–æ —Å–∫–ª–∞–¥–∞—é—Ç—å—Å—è –ª–∏—à–µ –∑ —Ü–∏—Ñ—Ä –∞–±–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ñ–≤, –∞–ª–µ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ –∫–æ—Ä–æ—Ç–∫—ñ —Å–ª–æ–≤–∞
        if not re.search(r'[a-zA-Z–∞-—è–ê-–Ø]', text) and len(text) < 10:
            if not any(word in text for word in GLOSSARY.keys()):
                return text

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
        if text in self.translation_cache:
            self.stats["cached"] += 1
            return self.translation_cache[text]

        # –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ
        print(f"  Translating: {text[:60]}...")
        translation = self.call_lm_studio(text)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
        self.translation_cache[text] = translation
        self.stats["translated"] += 1

        time.sleep(0.5)
        return translation

    def extract_entries(self, file_path: str) -> List[Tuple[str, str]]:
        """–í–∏—Ç—è–≥—É—î –≤—Å—ñ entry –∑ —Ñ–∞–π–ª—É"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            # <<< –ó–ú–Ü–ù–ï–ù–û: –ë—ñ–ª—å—à –≥–Ω—É—á–∫–∏–π –ø–∞—Ç–µ—Ä–Ω –¥–ª—è –ø–æ—à—É–∫—É —Ç–µ–≥—ñ–≤
            pattern = r'<entry name="([^"]+)">(.*?)</entry>'
            matches = re.findall(pattern, content, re.DOTALL)
            return matches
        except Exception as e:
            print(f"Error reading {file_path}: {e}")
            return []

    def process_file(self, input_path: str, output_path: str):
        """–û–±—Ä–æ–±–ª—è—î –æ–¥–∏–Ω —Ñ–∞–π–ª –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó"""
        print(f"\nüìÑ Processing: {Path(input_path).name}")

        with open(input_path, 'r', encoding='utf-8') as f:
            content = f.read()

        entries = self.extract_entries(input_path)
        if not entries:
            print("  No entries found, copying as is.")
            os.makedirs(os.path.dirname(output_path), exist_ok=True)
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(content)
            return

        print(f"  Found {len(entries)} entries.")
        translated_content = content

        for i, (name, text) in enumerate(entries):
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ re.escape –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ—ó –∑–∞–º—ñ–Ω–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ —É —Ç–µ–∫—Å—Ç—ñ
            escaped_text = re.escape(text)

            # –°—Ç–≤–æ—Ä—é—î–º–æ –±—ñ–ª—å—à —Ç–æ—á–Ω–∏–π –ø–∞—Ç–µ—Ä–Ω –¥–ª—è –∑–∞–º—ñ–Ω–∏, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–æ–∫
            pattern_to_replace = re.compile(f'(<entry name="{re.escape(name)}">){escaped_text}(</entry>)')

            translated = self.translate_text(text)

            # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–º—ñ–Ω—É, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ —Ç–µ–≥–∏
            translated_content = pattern_to_replace.sub(f'\\1{translated}\\2', translated_content, count=1)

            if (i + 1) % 10 == 0:
                print(f"  Progress: {i + 1}/{len(entries)}")
                self.save_cache()

        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(translated_content)
        print(f"  ‚úÖ Saved to: {output_path}")

    def process_all_files(self):
        """–û–±—Ä–æ–±–ª—è—î –≤—Å—ñ —Ñ–∞–π–ª–∏"""
        source_path = Path(SOURCE_DIR)
        output_path = Path(OUTPUT_DIR)

        # <<< –ó–ú–Ü–ù–ï–ù–û: –®—É–∫–∞—î–º–æ —Ñ–∞–π–ª–∏, —â–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ RU_
        files = list(source_path.glob("RU_*.txt")) + list(source_path.glob("RU_*.xml"))

        if not files:
            print("‚ùå No files found! Make sure SOURCE_DIR contains decrypted files starting with 'RU_'")
            return

        print(f"üéÆ SILKSONG UKRAINIAN TRANSLATION (from RU)")
        print(f"üìÅ Found {len(files)} files to translate.")
        print(f"ü§ñ Using model: {MODEL_NAME}")
        print(f"üåê API: {API_URL}\n")

        if not test_connection():
            return

        for i, file_path in enumerate(files, 1):
            print(f"\n[{i}/{len(files)}]", end="")
            relative_path = file_path.relative_to(source_path)

            # <<< –ó–ú–Ü–ù–ï–ù–û: –ó–∞–º—ñ–Ω—é—î–º–æ RU_ –Ω–∞ UA_ —É –Ω–∞–∑–≤—ñ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É
            output_filename = file_path.name.replace("RU_", "UA_", 1)
            output_file = output_path / relative_path.with_name(output_filename)

            self.process_file(str(file_path), str(output_file))
            self.save_cache()

        print(f"\n{'=' * 50}")
        print(f"‚úÖ TRANSLATION COMPLETED!")
        print(f"üìä Statistics:")
        print(f"  - Translated: {self.stats['translated']} strings")
        print(f"  - From cache: {self.stats['cached']} strings")
        print(f"  - Retried (empty): {self.stats['retried']} times")
        print(f"  - Errors: {self.stats['errors']} strings")
        print(f"üìÅ Output folder: {OUTPUT_DIR}")
        print(f"üíæ Cache saved to: translation_cache.json")

    def save_cache(self):
        with open("translation_cache.json", 'w', encoding='utf-8') as f:
            json.dump(self.translation_cache, f, ensure_ascii=False, indent=2)

    def load_cache(self):
        try:
            with open("translation_cache.json", 'r', encoding='utf-8') as f:
                self.translation_cache = json.load(f)
                print(f"üìö Loaded {len(self.translation_cache)} cached translations.")
        except FileNotFoundError:
            print("üìö Starting with empty translation cache.")


def test_connection():
    """–¢–µ—Å—Ç—É—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ LM Studio"""
    print("üîç Testing LM Studio connection...")
    try:
        response = requests.get("http://localhost:1234/v1/models", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Connection successful!")
            return True
        else:
            print("‚ùå Cannot connect to LM Studio! Make sure it's running on port 1234.")
            return False
    except requests.exceptions.RequestException:
        print("‚ùå LM Studio is not running! Start it first and load the model.")
        return False


if __name__ == "__main__":
    print("=" * 50)
    translator = SilksongLMStudioTranslator()
    translator.process_all_files()
    print("=" * 50)